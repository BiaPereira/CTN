import os
import numpy as np
import matplotlib.pyplot as plt
from lmfit.models import GaussianModel, ConstantModel
from scipy.stats import norm, gaussian_kde
from bisect import bisect
from matplotlib.backends.backend_pdf import PdfPages
import math
from scipy.optimize import curve_fit
from scipy.optimize import leastsq
from scipy import optimize
import itertools
import matplotlib.cbook as cbook
import matplotlib.dates as mdates
from PIL import Image, ImageDraw
import ezodf
from mpl_toolkits.axes_grid1.inset_locator import zoomed_inset_axes


#Opens file
filename = input('Name of the file: ')
tam = len(filename)

if filename[tam-3:tam] == 'txt':
    file = open(filename)
if filename[tam-3:tam] == 'odf':
    base = os.path.splitext(filename)[0]
    os.rename(filename, base + ".txt")
    file = open (filename[0:tam-3]+'txt')
fileR = file.read()

#function
def zoom_gráfico (minimo, maximo):
    lmin = x.index(minimo)
    lmax = x.index(maximo)
    new_x = []
    new_y = []
    new_x = x[lmin:lmax + 1]
    new_y = y[lmin:lmax + 1]

    plt.plot(new_x, new_y)
    plt.yscale('log', nonposy='clip')
    plt.ylabel('Intensidade')
    plt.xlabel('Canal')
    plt.show()

#Gauss
def gaussiana (A, y0,index_x, FWHM, x):
    gauss = y0 + (A/((FWHM/(np.log(4))**(1/2))))*np.exp(-2*((x-index_x)**2)/((FWHM/(np.log(4))**(1/2))**2))
    return gauss

#split
g = fileR.split(' ',-1)
print (g)
leng = len(g)
print (leng)
#Two list
i=0
x = []
y = []
for i in range(0,leng-1,4):

    x.append(float(g[i + 1]))
    y.append(float(g[i+3]))

#Max and min vector x and y
max_x = max(x)
min_x = min(x)
print (min_x)
max_y = max(y)
min_y = min(y)
print (len(x))
print (len(y))
print('Maximo de x', max_x)
print('Maximo de y', max_y)

print (x)
print (y)
# Plot
plt.plot(x,y)
plt.grid()

# legend
plt.plot(y, label="Experimental")
plt.legend(bbox_to_anchor=(0.8, 1), loc=2, borderaxespad=0.)

# Axes
plt.ylabel('Intensidade')
plt.xlabel('Canal')
#plt.axhline(y=0) linha horizontal
#plt.axvline(x=0) linha vertical
plt.yscale('log', nonposy='clip')
plt.show()


#---------------------New plot

xx=np.array(x, dtype=float)
yy=np.array(y, dtype=float)

import numpy as np
import scipy.optimize as opt
from scipy.stats import norm
min_xx1 = 2620
max_xx1 = 2740

# New vector x and y (shorter)
xx1 = x[min_xx1:max_xx1 + 1]
yy1 = y[min_xx1 :max_xx1 + 1]

min_xx2 = 2525
max_xx2 = 2620

xx2 = x[min_xx2:max_xx2 + 1]
yy2 = y[min_xx2:max_xx2 + 1]

y0 = int(input('y0:'))
#min_xx = lim_min
#max_xx = lim_max


max_yy1 = max(yy1)#max_counts
FWHMyy1 = max_yy1/2 #number of FWHM yy
print ('FWHMyy1',FWHMyy1)

max_yy2 = max(yy2)#max_counts
FWHMyy2 = max_yy2/2 #number of FWHM yy
print ('FWHMyy2',FWHMyy2)

#In case that FWHM does not appear in yy
if FWHMyy1 in yy1:
    index_FWHM_y1 = yy1.index(FWHMyy1) + min_xx1

else:
    y2 = sorted(yy1) #order
    print (y2)
    index_FWHM_y2 = bisect(y2,FWHMyy1)
    print ('index_FWHM_y2',index_FWHM_y2)
    number = y2[index_FWHM_y2]
    print (number)
    index_FWHM_y1 = yy1.index(number) + min_xx1

print ('yy.index(maxy)',yy1.index(max_yy1))
print ('yy.index(FWHMy)', index_FWHM_y1)
index_max_y1 = yy1.index(max_yy1) + min_xx1

FWHM_xx1 = (abs(index_max_y1-index_FWHM_y1)*2)
FWHM21 = (abs(index_max_y1-index_FWHM_y1))

#Area
inicio1 = index_max_y1 - min_xx1 - FWHM21
fim1 = inicio1 + FWHM_xx1
area1 = 0
j = inicio1
for j in range(inicio1, fim1,1):
    area1 = (area1 + yy1[j])
    #print ('area:', area)

xx1=np.array(xx1, dtype=float)


if FWHMyy2 in yy2:
    index_FWHM_y2 = yy2.index(FWHMyy2) + min_xx2

else:
    y2 = sorted(yy2) #order
    print (y2)
    index_FWHM_y2 = bisect(y2,FWHMyy2)
    print ('index_FWHM_y2',index_FWHM_y2)
    number = y2[index_FWHM_y2]
    print (number)
    index_FWHM_y2 = yy2.index(number) + min_xx2

print ('yy.index(maxy)',yy2.index(max_yy2))
print ('yy.index(FWHMy)', index_FWHM_y2)
index_max_y2 = yy2.index(max_yy2) + min_xx2

FWHM_xx2 = (abs(index_max_y2-index_FWHM_y2)*2)
FWHM22 = (abs(index_max_y2-index_FWHM_y2))

#Area
inicio2 = index_max_y2 - min_xx2 - FWHM22
fim2 = inicio2 + FWHM_xx2
area2 = 0
print('inicio2', inicio2)
print('fim2', fim2)
f = inicio2
for j in range(inicio2, fim2,1):
    area2 = (area2 + yy2[f])
    #print ('area:', area)

xx2=np.array(xx2, dtype=float)

print ('Entre que valores está o pico máximo1?')
#min_xx1 = int(input('Lower limit: '))
#max_xx1 = int(input('Upper limit: '))
PS1= FWHMyy1/2*(np.log(4))**(1/2)
PS2= FWHMyy2/2*(np.log(4))**(1/2)

gauss1  = GaussianModel(prefix='peak1_')
#params = gauss1.make_params(c=y0, peak1_center=index_max_y1, peak1_sigma=PS1, peak1_amplitude= area1)
params['peak1_sigma'].min = 0         # sigma  > 0
params['peak1_amplitude'].min = 0     # amplitude > 0
params['peak1_center'].min = min_xx1
params['peak1_center'].max = max_xx1

gauss2  = GaussianModel(prefix='peak2_')
params = gauss1.make_params(c=y0, peak2_center=index_max_y2, peak2_sigma=PS2, peak2_amplitude= area2)
params['peak2_sigma'].set (PS2, min = 0)# sigma  > 0
params['peak2_amplitude'].set(area2, min = 0)  # amplitude > 0
params['peak2_center'].set (min = min_xx2
params['peak2_center'].max = max_xx2

mod = gauss1 + gauss2
init = mod.eval(params, x=x)
plt.plot(x, y)
plt.plot(x, init, 'k--')
out = mod.fit(y, pars, x=x)
comps = out.eval_components(x=x)
print(out.fit_report(min_correl=0.5))
plt.plot(x, out.best_fit, 'r-')
plt.plot(x, comps['g1_'], 'b--')
plt.plot(x, comps['g2_'], 'b--')
plt.plot(x, comps['exp_'], 'k--')

